#!/usr/bin/python2

import argparse
from shutil import copyfile
import json
import os
import re


SPECIAL_SUBDIRECTORIES = {
    '__root__': ''  # just root
}


def safe_mkdirs(path):
    try:
        os.makedirs(path)
    except:
        pass


def clear_empty_directories_tree(path):

    def find_empty_dirs(root_dir):
        for dirpath, dirs, files in os.walk(root_dir):
            if not dirs and not files:
                yield dirpath

    while True:
        items = list(find_empty_dirs(path))

        if len(items) == 0:
            break

        for element in items:
            os.rmdir(element)


def recursive_re_copy(path, regex, destination, recursive=True, preserve_paths=True):
    for root, dirs, files in os.walk(path):
        # Making relative path from absolute
        relative_path = root.replace(path, '')

        if relative_path and relative_path[0] == os.path.sep:
            relative_path = relative_path[1:]

        dest_path = os.path.join(destination, relative_path)

        if preserve_paths:
            safe_mkdirs(dest_path)

        for fl in files:
            if not re.search(regex, fl):
                continue

            copyfile(
                os.path.join(root, fl),
                os.path.join(dest_path, fl) if preserve_paths else os.path.join(destination, fl)
            )

        if not recursive:
            break


def perform_install(configuration):

    with open(configuration.dependencies_file) as dep_file:
        dependencies = json.load(dep_file)

    # Creating install directory if required
    safe_mkdirs(configuration.install_dir)

    # Copying meta info
    copyfile(
        configuration.engine_meta_file,
        os.path.join(configuration.install_dir, 'engine_meta.json')
    )

    for key in dependencies:

        print('Processing \"%s\" key' % key)

        if key in SPECIAL_SUBDIRECTORIES:
            subdirectory = SPECIAL_SUBDIRECTORIES[key]
        else:
            subdirectory = key

        install_dest_dir = os.path.join(configuration.install_dir, subdirectory)

        include_dest_dir = os.path.join(install_dest_dir, 'include')
        libraries_dest_dir = os.path.join(install_dest_dir, 'lib')
        binaries_dest_dir = install_dest_dir
        files_dest_dir = install_dest_dir

        safe_mkdirs(include_dest_dir)
        safe_mkdirs(libraries_dest_dir)

        content = dependencies[key]

        if content.get('include_directories'):
            for include_dir in content['include_directories']:
                recursive_re_copy(
                    path=include_dir,
                    regex=R"\.hpp",
                    destination=include_dest_dir,
                    recursive=True,
                    preserve_paths=True
                )

        if content.get('library_paths'):
            for lib_dir in content['library_paths']:
                copyfile(
                    lib_dir,
                    os.path.join(libraries_dest_dir, os.path.basename(lib_dir))
                )

        if content.get('binaries'):
            for binary_dir in content['binaries']:
                copyfile(
                    binary_dir,
                    os.path.join(binaries_dest_dir, os.path.basename(binary_dir))
                )

        if content.get('files'):
            for file_dict in content['files']:
                target_full_path = os.path.join(files_dest_dir, file_dict['target'])

                safe_mkdirs(os.path.dirname(target_full_path))

                copyfile(
                    file_dict['source'],
                    target_full_path
                )

        clear_empty_directories_tree(include_dest_dir)

    print("Installation finished")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--dependencies_file',
        help='Path to json file with dependencies. This file has to be generated by `cmake`.',
        required=True
    )

    parser.add_argument(
        '--engine_meta_file',
        help='Path to json with engine meta info. This file has to be generated by `cmake`.',
        required=True
    )

    parser.add_argument(
        '--install_dir',
        help='Path to installation directory.',
        required=True
    )

    args = parser.parse_args()

    perform_install(args)