import argparse
from shutil import copyfile
import json
import os
import re


def safe_mkdirs(path):
    try:
        os.makedirs(path)
    except:
        pass


def recursive_re_copy(path, regex, destination, recursive=True, preserve_paths=True):
    for root, dirs, files in os.walk(path):
        # Making relative path from absolute
        relative_path = root.replace(path, '')

        if relative_path and relative_path[0] == os.path.sep:
            relative_path = relative_path[1:]

        dest_path = os.path.join(destination, relative_path)

        if preserve_paths:
            print("Creating \"%s\"" % dest_path)
            safe_mkdirs(dest_path)

        for fl in files:
            if not re.search(regex, fl):
                continue

            print("Copying \"%s\"" % os.path.join(root, fl))
            copyfile(
                os.path.join(root, fl),
                os.path.join(dest_path, fl) if preserve_paths else os.path.join(destination, fl)
            )

        if not recursive:
            break


def perform_install(configuration):
    """
    Function, that performs installation.

    Dependencies file format:
    ```json
    {
        "engine": {
            "include_directories": [
                ...
            ],
            "library_paths": [
                ...
            ]
        },
        ...
    }
    ```

    :param configuration:
    :return:
    """

    with open(configuration.dependencies_file) as dep_file:
        dependencies = json.load(dep_file)

    install_dest_dir = os.path.join(configuration.install_dir, 'engine')

    include_dest_dir = os.path.join(install_dest_dir, 'include')
    libraries_dest_dir = os.path.join(install_dest_dir, 'lib')

    safe_mkdirs(include_dest_dir)
    safe_mkdirs(libraries_dest_dir)

    for subdirectory in dependencies:
        content = dependencies[subdirectory]
        for include_dir in content['include_directories']:
            recursive_re_copy(
                path=include_dir,
                regex=R"\.hpp",
                destination=include_dest_dir,
                recursive=True,
                preserve_paths=True
            )

        for lib_dir in content['library_paths']:
            recursive_re_copy(
                path=lib_dir,
                regex=R"lib[A-Za-z_]+\.(a|so)",
                destination=libraries_dest_dir,
                recursive=False,
                preserve_paths=False
            )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--dependencies_file',
        help='Path to json file with dependencies. This file has to be generated by `cmake`.`',
        required=True
    )

    parser.add_argument(
        '--install_dir',
        help='Path to installation directory.',
        required=True
    )

    args = parser.parse_args()

    perform_install(args)